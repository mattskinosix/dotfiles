
function __fish_skaffold_no_subcommand --description 'Test if skaffold has yet to be given the subcommand'
	for i in (commandline -opc)
		if contains -- $i build completion config debug delete deploy dev diagnose fix init options run version
			return 1
		end
	end
	return 0
end
function __fish_skaffold_seen_subcommand_path --description 'Test whether the full path of subcommands is the current path'
	  set -l cmd (commandline -opc)
	  set -e cmd[1]
    set -l pattern (string replace -a " " ".+" "$argv")
    string match -r "$pattern" (string trim -- "$cmd")
end
# borrowed from current fish-shell master, since it is not in current 2.7.1 release
function __fish_seen_argument
	argparse 's/short=+' 'l/long=+' -- $argv

	set cmd (commandline -co)
	set -e cmd[1]
	for t in $cmd
		for s in $_flag_s
			if string match -qr "^-[A-z0-9]*"$s"[A-z0-9]*\$" -- $t
				return 0
			end
		end

		for l in $_flag_l
			if string match -q -- "--$l" $t
				return 0
			end
		end
	end

	return 1
end
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a build -d 'Build the artifacts'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a completion -d 'Output shell completion for the given shell (bash or zsh)'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a config -d 'Interact with the Skaffold configuration'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a debug -d 'Run a pipeline in debug mode'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a delete -d 'Delete the deployed application'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a deploy -d 'Deploy pre-built artifacts'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a dev -d 'Run a pipeline in development mode'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a diagnose -d 'Run a diagnostic on Skaffold'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a fix -d 'Update old configuration to newest schema version'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a init -d 'Generate configuration for deploying an application'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a options -d ''
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a run -d 'Run a pipeline'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -a version -d 'Print the version information'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_no_subcommand' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s b -l build-image -d 'Choose which artifacts to build. Artifacts with image names that contain the expression will be built only. Default is to build sources for all artifacts'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build'   -l cache-artifacts -d 'Set to true to enable caching of artifacts'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r  -l cache-file -d 'Specify the location of the cache file (default $HOME/.skaffold/cache)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s c -l config -d 'File for global configurations (defaults to $HOME/.skaffold/config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s d -l default-repo -d 'Default repository value (overrides global config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build'   -l enable-rpc -d 'Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r  -l file-output -d 'Filename to write build images to'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r  -l insecure-registry -d 'Target registries for built images which are not secure'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r  -l kube-context -d 'Deploy to this kubernetes context'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s n -l namespace -d 'Run deployments in the specified namespace'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s o -l output -d 'Used in conjunction with --quiet flag. Format output with go-template. For full struct documentation, see https://godoc.org/github.com/GoogleContainerTools/skaffold/cmd/skaffold/app/flags#BuildOutput'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s p -l profile -d 'Activate profiles by name'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build'  -s q -l quiet -d 'Suppress the build output and print image built on success. See --output to format output.'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r  -l rpc-http-port -d 'tcp port to expose event REST API over HTTP'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r  -l rpc-port -d 'tcp port to expose event API'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build'   -l skip-tests -d 'Whether to skip the tests after building'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build'   -l toot -d 'Emit a terminal beep after the deploy is complete'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path build' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path completion; and not __fish_seen_argument -s h -l help' -a bash -d 'Positional Argument to completion'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path completion; and not __fish_seen_argument -s h -l help' -a fish -d 'Positional Argument to completion'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path completion; and not __fish_seen_argument -s h -l help' -a zsh -d 'Positional Argument to completion'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path completion'  -s h -l help -d 'help for completion'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path completion' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path completion' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config' -a list -d 'List all values set in the global Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config' -a set -d 'Set a value in the global Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config' -a unset -d 'Unset a value in the global Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config list'  -s a -l all -d 'Show values for all kubecontexts'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config list' -r -s c -l config -d 'Path to Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config list' -r -s k -l kube-context -d 'Kubectl context to set values against'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config list' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config list' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config set' -r -s c -l config -d 'Path to Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config set'  -s g -l global -d 'Set value for global config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config set' -r -s k -l kube-context -d 'Kubectl context to set values against'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config set' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config set' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config unset' -r -s c -l config -d 'Path to Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config unset'  -s g -l global -d 'Set value for global config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config unset' -r -s k -l kube-context -d 'Kubectl context to set values against'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config unset' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path config unset' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l cache-artifacts -d 'Set to true to enable caching of artifacts'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r  -l cache-file -d 'Specify the location of the cache file (default $HOME/.skaffold/cache)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l cleanup -d 'Delete deployments after dev or debug mode is interrupted'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r -s c -l config -d 'File for global configurations (defaults to $HOME/.skaffold/config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r -s d -l default-repo -d 'Default repository value (overrides global config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l enable-rpc -d 'Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l force -d 'Recreate kubernetes resources if necessary for deployment (warning: might cause downtime!)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r  -l insecure-registry -d 'Target registries for built images which are not secure'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r  -l kube-context -d 'Deploy to this kubernetes context'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r -s l -l label -d 'Add custom labels to deployed objects. Set multiple times for multiple labels'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r -s n -l namespace -d 'Run deployments in the specified namespace'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l no-prune -d 'Skip removing images and containers built by Skaffold'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l no-prune-children -d 'Skip removing layers reused by Skaffold'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l port-forward -d 'Port-forward exposed container ports within pods'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r -s p -l profile -d 'Activate profiles by name'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r  -l rpc-http-port -d 'tcp port to expose event REST API over HTTP'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r  -l rpc-port -d 'tcp port to expose event API'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l skip-tests -d 'Whether to skip the tests after building'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l tail -d 'Stream logs from deployed objects'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug'   -l toot -d 'Emit a terminal beep after the deploy is complete'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path debug' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r -s c -l config -d 'File for global configurations (defaults to $HOME/.skaffold/config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r -s d -l default-repo -d 'Default repository value (overrides global config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r  -l kube-context -d 'Deploy to this kubernetes context'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r -s n -l namespace -d 'Run deployments in the specified namespace'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r -s p -l profile -d 'Activate profiles by name'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path delete' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s a -l build-artifacts -d 'Filepath containing build output.
E.g. build.out created by running skaffold build --quiet {{json .}} > build.out'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s c -l config -d 'File for global configurations (defaults to $HOME/.skaffold/config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s d -l default-repo -d 'Default repository value (overrides global config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy'   -l enable-rpc -d 'Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy'   -l force -d 'Recreate kubernetes resources if necessary for deployment (default false, warning: might cause downtime!)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s i -l images -d 'A list of pre-built images to deploy'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r  -l kube-context -d 'Deploy to this kubernetes context'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s l -l label -d 'Add custom labels to deployed objects. Set multiple times for multiple labels'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s n -l namespace -d 'Run deployments in the specified namespace'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s p -l profile -d 'Activate profiles by name'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r  -l rpc-http-port -d 'tcp port to expose event REST API over HTTP'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r  -l rpc-port -d 'tcp port to expose event API'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy'   -l tail -d 'Stream logs from deployed objects (default false)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy'   -l toot -d 'Emit a terminal beep after the deploy is complete'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path deploy' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l cache-artifacts -d 'Set to true to enable caching of artifacts'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r  -l cache-file -d 'Specify the location of the cache file (default $HOME/.skaffold/cache)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l cleanup -d 'Delete deployments after dev or debug mode is interrupted'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s c -l config -d 'File for global configurations (defaults to $HOME/.skaffold/config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s d -l default-repo -d 'Default repository value (overrides global config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l enable-rpc -d 'Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l force -d 'Recreate kubernetes resources if necessary for deployment (warning: might cause downtime!)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r  -l insecure-registry -d 'Target registries for built images which are not secure'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r  -l kube-context -d 'Deploy to this kubernetes context'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s l -l label -d 'Add custom labels to deployed objects. Set multiple times for multiple labels'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s n -l namespace -d 'Run deployments in the specified namespace'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l no-prune -d 'Skip removing images and containers built by Skaffold'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l no-prune-children -d 'Skip removing layers reused by Skaffold'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l port-forward -d 'Port-forward exposed container ports within pods'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s p -l profile -d 'Activate profiles by name'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r  -l rpc-http-port -d 'tcp port to expose event REST API over HTTP'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r  -l rpc-port -d 'tcp port to expose event API'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l skip-tests -d 'Whether to skip the tests after building'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l tail -d 'Stream logs from deployed objects'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev'   -l toot -d 'Emit a terminal beep after the deploy is complete'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r  -l trigger -d 'How is change detection triggered? (polling, notify, or manual)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s w -l watch-image -d 'Choose which artifacts to watch. Artifacts with image names that contain the expression will be watched only. Default is to watch sources for all artifacts'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s i -l watch-poll-interval -d 'Interval (in ms) between two checks for file changes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path dev' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path diagnose' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path diagnose' -r -s p -l profile -d 'Activate profiles by name'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path diagnose' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path diagnose' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path fix' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path fix'   -l overwrite -d 'Overwrite original config with fixed config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path fix' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path fix' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init'   -l analyze -d 'Print all discoverable Dockerfiles and images in JSON format to stdout'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init' -r -s a -l artifact -d '\'=\'-delimited Dockerfile/image pair, or JSON string, to generate build artifact
(example: --artifact=\'{"builder":"Docker","payload":{"path":"/web/Dockerfile.web"},"image":"gcr.io/web-project/image"}\')'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init' -r  -l compose-file -d 'Initialize from a docker-compose file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init'   -l force -d 'Force the generation of the Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init'   -l skip-build -d 'Skip generating build artifacts in Skaffold config'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path init' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path options' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path options' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l cache-artifacts -d 'Set to true to enable caching of artifacts'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r  -l cache-file -d 'Specify the location of the cache file (default $HOME/.skaffold/cache)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l cleanup -d 'Delete deployments after dev or debug mode is interrupted'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s c -l config -d 'File for global configurations (defaults to $HOME/.skaffold/config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s d -l default-repo -d 'Default repository value (overrides global config)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l enable-rpc -d 'Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s f -l filename -d 'Filename or URL to the pipeline file'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l force -d 'Recreate kubernetes resources if necessary for deployment (warning: might cause downtime!)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r  -l insecure-registry -d 'Target registries for built images which are not secure'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r  -l kube-context -d 'Deploy to this kubernetes context'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s l -l label -d 'Add custom labels to deployed objects. Set multiple times for multiple labels'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s n -l namespace -d 'Run deployments in the specified namespace'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l no-prune -d 'Skip removing images and containers built by Skaffold'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l no-prune-children -d 'Skip removing layers reused by Skaffold'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s p -l profile -d 'Activate profiles by name'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r  -l rpc-http-port -d 'tcp port to expose event REST API over HTTP'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r  -l rpc-port -d 'tcp port to expose event API'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l skip-tests -d 'Whether to skip the tests after building'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s t -l tag -d 'The optional custom tag to use for images which overrides the current Tagger configuration'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l tail -d 'Stream logs from deployed objects (default false)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run'   -l toot -d 'Emit a terminal beep after the deploy is complete'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path run' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path version' -r -s o -l output -d 'Format output with go-template. For full struct documentation, see https://godoc.org/github.com/GoogleContainerTools/skaffold/pkg/skaffold/version#Info'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path version' -r  -l color -d 'Specify the default output color in ANSI escape codes'
complete -c skaffold -f -n '__fish_skaffold_seen_subcommand_path version' -r -s v -l verbosity -d 'Log level (debug, info, warn, error, fatal, panic)'
